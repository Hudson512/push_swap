Obj Geral : Escrever um algoritmo de classificação.

Obj esp: Rigor, uso de C e uso de algoritmos básicos.
Palavras chaves:
Algoritmos de classificação
conceitos
Classificar da maneira mais rápida possível é menos simples.


------------------------------------------------------------------------
						Regras

Você tem 2 pilhas chamadas a e b.

No começo:	A pilha a contém uma quantidade aleatória de números negativos e/ou positivos que não podem ser duplicados.

A pilha b está vazia.

• ​​O objetivo é classificar em ordem crescente os números na pilha a.
Para fazer isso, você tem as seguintes operações à sua disposição:

***********************************************************************************
sa (swap a): Troque os 2 primeiros elementos no topo da pilha a.
Não faça nada se houver apenas um ou nenhum elemento.

sb (swap b): Troque os 2 primeiros elementos no topo da pilha b.
Não faça nada se houver apenas um ou nenhum elemento.

ss : sa e sb ao mesmo tempo.

***********************************************************************************
pa (push a): Pegue o primeiro elemento no topo de b e coloque-o no topo de a.
Não faça nada se b estiver vazio.

pb (push b): Pegue o primeiro elemento no topo de a e coloque-o no topo de b.
Não faça nada se a estiver vazio.

***********************************************************************************
ra (rotate a): Desloca todos os elementos da pilha a para cima em 1.
O primeiro elemento se torna o último.

rb (rotate b): Desloca todos os elementos da pilha b para cima em 1.
O primeiro elemento se torna o último.

rr : ra e rb ao mesmo tempo.

***********************************************************************************
rra (reverse rotate a): Desloca todos os elementos da pilha a para baixo em 1.
O último elemento se torna o primeiro.

rrb (reverse rotate b): Desloca todos os elementos da pilha b para baixo em 1.
O último elemento se torna o primeiro.

rrr : rra e rrb ao mesmo tempo.

------------------------------------------------------------------------
						Passos
1- Você tem que escrever um programa chamado push_swap que recebe como argumento a pilha a formatada como uma lista de inteiros. O primeiro argumento deve estar no topo da pilha (tenha cuidado com a ordem).

2- O programa deve exibir a menor lista de instruções possível para classificar a pilha a, o menor número estando no topo. As instruções devem ser separadas por um '\n' e nada mais.

3- Se nenhum parâmetro for especificado, o programa não deve exibir nada e retornar o prompt.

4- Em caso de erro, deve exibir "Error" seguido de um ’\n’ na saída de erro padrão. Erros incluem, por exemplo: alguns argumentos não são inteiros, alguns argumentos são maiores que um inteiro e/ou há duplicatas.

------------------------------------------------------------------------
						Meu Desenvolvimento
1º Receber os argumentos [Converter para inteiro, verificar os erros (Duplicados, valores diferentes de números)].

2º Adicionar na pilha os argumentos (Caso passem na verificação).

3º Verficar se a pilha está ordenada; 
	Se estiver não faça nada; 
	Se não estiver ordena.

4º Criar as funções de ordenação segundo as regras passadas.
	sa, sb e ss -> Feito.
	pa e pb -> Feito.
	ra e rb -> Feito.
	rra, rrb e rrr -> Feito.

5º Criar uma logica para odernar a pilha. 
	# valores para teste: 5 2 7 1 6 3 9 4 8;

	1º Verificar o tamanho da pilha 'a', se é igual a 3;
		Caso seja:
			- Não é necessário fazer push;
			- Se o tamanho for 3, preciso apenas de 1 operação para classificar a pilha.
			OBS: Com excesão a dois casos;
				1º Se estiver classificada de ordem decrescente.
					Ex: 3-2-1
				2º Se a sequência em que o maior número e o segundo maior número trocam de lugar.
					Ex: 1-3-2

	2º Uma lista com + de 3 elemento:
		- Empurrar os dois primeiros elemento do topo da pilha 'a' para a pilha 'b'. Sem verificar nada;
		- Contar e calcular para cada número um por um.
			- Calcular quantas operações seriam necessárias para empurrar o número para a posição correta na pilha 'b'.
			


